#!/usr/bin/env coffee

fs = require 'fs'
match = require './match.coffee'
{ SCORE_MULT } = require './pattern'
{ LOG_MULT } = require './logutil'

argv = require 'yargs'
  .options
    min:
      desc: 'Minimum value to search'
      default: 0
      type: 'number'
      requiresArg: true
    max:
      desc: 'Maximum value to search'
      default: 4
      type: 'number'
      requiresArg: true
    p:
      alias: 'precision'
      desc: 'Search precision'
      default: 0.01
      type: 'number'
      requiresArg: true
    s:
      alias: 'search'
      desc: 'Number of UCT search of match'
      default: match.defaults.search
    w:
      alias: 'wld'
      desc: 'WLD search depth'
      default: match.defaults.wld
    f:
      alias: 'full'
      desc: 'Full search depth'
      default: match.defaults.full
    weights:
      desc: 'Weights file'
      default: 'weights.json'
      requiresArg: true
    h:
      alias: 'help'
  .strict()
  .version false
  .argv

try_value = (value, max) ->
  process.stdout.write "C=#{value}: "

  { winrate, avg } = match
    C: value * SCORE_MULT
    C_log: value * LOG_MULT
    weights: argv.weights
    ref: argv.weights
    search: argv.search
    wld: argv.wld
    full: argv.full
    quiet: true
    minimax: true

  score = winrate + avg * 0.0001
  process.stdout.write "score=#{Math.round(score*10000)/10000}"
  if score > max
    process.stdout.write ' *\n'
  else
    process.stdout.write '\n'
  score

optimize = () ->
  step = (argv.max - argv.min) / 4
  best = (argv.min + argv.max) / 2
  max = try_value(best, -Infinity)
  loop
    tmp = best + step
    score = try_value(tmp, max)
    if score > max
      max = score
      best = tmp
    else
      tmp = best - step
      score = try_value(tmp, max)
      if score > max
        max = score
        best = tmp

    break if step < argv.precision
    step *= .5
  console.log "Best value #{best}"

do ->
  optimize()
