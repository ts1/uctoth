#!/usr/bin/env coffee

require './rejection_handler'
fs = require 'fs'
{ PatternBoard, patterns, N_MOVES_PER_PHASE, N_PHASES } = require './pattern'
{ EMPTY } = require './board'
{ readlines, gzwriter, int } = require './util'

each_board = (filename, cb) ->
  readlines filename, (line) ->
    [squares, turn, outcome] = line.split ' '
    board = new PatternBoard squares
    turn = parseInt turn
    outcome = parseInt outcome
    cb board, turn, outcome

indexify = (filename, outfiles) ->
  n = 0
  await each_board filename, (board, turn, outcome) ->
    board.set_parity turn
    row = [outcome]
    for p in patterns
      map = {}
      for i in p.indexes
        index = p.normalize(board.indexes[i])
        abs = Math.abs index
        value = map[abs] or 0
        if index >= 0
          map[abs] = value + 1
        else
          map[abs] = value - 1
      for index, value of map
        console.assert p.get_single_index(index) != null
        row.push p.get_single_index(index)
        row.push value

    phase = int((59 - board.count(EMPTY)) / N_MOVES_PER_PHASE)
    row = JSON.stringify row
    for ph in [phase-1..phase+1]
      if ph >= 0 and ph < N_PHASES
        outfiles[ph].write "#{row}\n"
    n++
  console.log "indexed #{n} nodes"

do ->
  args = process.argv.slice 2
  if args.length != 1
    console.log "Usage: #{process.argv[1]} prefix|file"
    process.exit 1
  [arg] = args
  if fs.existsSync("tmp/#{arg}_nodes.gz")
    infile = "tmp/#{arg}_nodes.gz"
    outfiles = (gzwriter "tmp/#{arg}_indexes#{i}.gz" for i in [0...N_PHASES])
  else
    infile = arg
    outfiles = (gzwriter "tmp/indexes#{i}.gz" for i in [0...N_PHASES])

  console.log "indexing #{infile}"
  await indexify infile, outfiles
  gz.end() for gz in outfiles
