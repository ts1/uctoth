#!/usr/bin/env coffee
require './rejection_handler'
{ pos_array_from_str } = require './board'
{ watch_file } = require './util'
Book = require './book'
Player = require './player'
uct = require './uct'

argv = require 'yargs'
  .options
    o:
      alias: 'opening'
      desc: 'Opening to learn'
      default: 'F5'
      type: 'string'
      requiresArg: true
    n:
      desc: 'Number to learn'
      type: 'number'
      default: Infinity
      requiresArg: true
    s:
      desc: 'Number of UCT search'
      type: 'number'
      default: 10000
      requiresArg: true
    w:
      alias: 'wld'
      desc: 'Depth of win-loss-draw solve'
      type: 'number'
      default: 22
      requiresArg: true
    f:
      alias: 'full'
      desc: 'Depth of full solve'
      type: 'number'
      default: 20
      requiresArg: true
    S:
      alias: 'scope'
      desc: 'UCT constant to find opening'
      default: .5
      type: 'number'
      requiresArg: true
    B:
      alias: 'book'
      desc: 'Database file'
      default: 'book.db'
      type: 'string'
      requiresArg: true
    watch:
      desc: 'Watch the file and exit when it changes'
      default: 'weights.json'
      requiresArg: true
    v:
      alias: 'verbose'
      default: false
      type: 'boolean'
    h:
      alias: 'help'
  .strict()
  .version false
  .argv

pattern_eval = require('./pattern_eval')('weights.json')

do_evaluate = Player
  book: null
  strategy: uct
    verbose: false
    max_search: argv.s
    evaluate: pattern_eval
    by_value: true
  solve_wld: argv.wld
  solve_full: argv.full
  verbose: false
  endgame_eval: pattern_eval

evaluate = (board, turn, moves) ->
  max = -Infinity
  for pos in moves or board.list_moves(turn)
    flips = board.move(turn, pos)
    throw new Error unless flips.length
    if board.any_moves(-turn)
      { value, move, solved } = do_evaluate(board, -turn)
      value = 0 unless value?
      value = -value
    else
      { value, move, solved } = do_evaluate(board, turn)
      value = 0 unless value?
    board.undo turn, pos, flips
    if value > max
      max = value
      best = pos
      best_move = move

  if not solved and best_move > 0
    flips = board.move(turn, best)
    throw new Error unless flips.length
    if board.any_moves(-turn)
      { value } = do_evaluate(board, -turn, [best_move])
      value = 0 unless value?
      value = -value
    else
      { value } = do_evaluate(board, turn, [best_move])
      value = 0 unless value?
    #console.log max, value
    board.undo turn, best, flips
    max = Math.round((max + value) / 2)

  { value: max, move: best, solved }

do ->
  book = new Book argv.book, evaluate: evaluate, verbose: argv.verbose
  book.init()
  opening = pos_array_from_str(argv.opening)
  reload = if argv.watch then watch_file(argv.watch) else -> false
  for i in [0...argv.n]
    book.extend argv.scope, opening
    break if reload()
