#!/usr/bin/env coffee

fs = require 'fs'
{ N_PHASES } = require './pattern'
minibatch = require './minibatch.coffee'
coeffs_to_weights = require './coeffs_to_weights.coffee'
match = require './match.coffee'
{ watch_file } = require './util'

argv = require 'yargs'
  .options
    min:
      desc: 'Minimum value to search'
      default: 0.001
      type: 'number'
      requiresArg: true
    max:
      desc: 'Maximum value to search'
      default: 10
      type: 'number'
      requiresArg: true
    p:
      alias: 'precision'
      desc: 'Search precision'
      default: 0.1
      type: 'number'
      requiresArg: true
    b:
      alias: 'book'
      desc: 'Database file'
      default: 'book.db'
      requiresArg: true
    l:
      alias: 'logistic'
      desc: 'Logistic regression'
      type: 'boolean'
    e:
      alias: 'epochs'
      desc: 'Train epochs'
      type: 'number'
      default: minibatch.defaults.epochs
    loop:
      desc: 'Loop forever'
      type: 'boolean'
    prefix:
      desc: 'Prefix of coeffs'
      default: 'tmp/l2opt/coeffs'
    weights:
      desc: 'Temporary weights file'
      default: 'tmp/l2opt/weights.json'
      requiresArg: true
    default_l2:
      desc: 'Default L2 value'
      default: minibatch.defaults.l2
      requiresArg: true
    s:
      alias: 'search'
      desc: 'Number of UCT search of match'
      default: match.defaults.search
    w:
      alias: 'wld'
      desc: 'WLD search depth'
      default: match.defaults.wld
    f:
      alias: 'full'
      desc: 'Full search depth'
      default: match.defaults.full
    phase:
      desc: 'Phase to optimize (default all)'
      type: 'number'
      requiresArg: true
    h:
      alias: 'help'
  .strict()
  .version false
  .argv

prepare_coeffs = (phase) ->
  orig_file = "tmp/coeffs#{phase}"
  if fs.existsSync(orig_file)
    fs.copyFileSync orig_file, "#{argv.prefix}#{phase}"
  else
    l2file = "L2/#{phase}"
    l2 =
      if fs.existsSync(l2file)
        parseInt(fs.readFileSync(l2file))
      else
        argv.default_l2

    process.stdout.write "Preparing coeffs for phase #{phase}: "

    minibatch
      l2: l2
      book: argv.book
      phase: phase
      logistic: argv.logistic
      epochs: argv.epochs
      outfile: "#{argv.prefix}#{phase}"
      verbose: false

    process.stdout.write "done\n"

prepare = (phase) ->
  for p in [0...N_PHASES]
    if p != phase
      prepare_coeffs p unless fs.existsSync("#{argv.prefix}#{p}")

optimize_cv = (phase) ->
  l2 = minibatch
    search: true
    search_precision: 1 + argv.precision
    search_min: argv.min
    search_max: argv.max
    book: argv.book
    phase: phase
    logistic: argv.logistic
    epochs: argv.epochs
  fs.writeFileSync "L2/#{phase}", "#{l2}\n"

  minibatch
    l2: l2
    book: argv.book
    phase: phase
    logistic: argv.logistic
    epochs: argv.epochs
    outfile: "#{argv.prefix}#{phase}"
    verbose: false

try_value = (phase, value, max) ->
  process.stdout.write "L2 #{value}: "

  minibatch
    l2: value
    book: argv.book
    phase: phase
    logistic: argv.logistic
    epochs: argv.epochs
    outfile: "#{argv.prefix}#{phase}"
    verbose: false

  coeffs_to_weights
    prefix: argv.prefix
    outfile: argv.weights
    verbose: false

  { winrate, avg } = match
    weights: argv.weights
    search: argv.search
    wld: argv.wld
    full: argv.full
    quiet: true
    openings: match.defaults.openings
    min: max

  score = winrate + avg * 0.0001
  process.stdout.write "score #{Math.round(100000*score)/100000}"
  if score > max
    process.stdout.write ' *\n'
  else
    process.stdout.write '\n'
  score

optimize_match = (phase) ->
  value = minibatch
    search: true
    search_precision: 1.4
    search_min: argv.min
    search_max: argv.max
    book: argv.book
    phase: phase
    logistic: argv.logistic
    epochs: argv.epochs

  ubound = value * 2
  lbound = value / 2
  step = (ubound / lbound) ** .25
  best = (lbound * ubound) ** .5
  max = try_value(phase, best, -Infinity)
  loop
    tmp = best * step
    score = try_value(phase, tmp, max)
    if score > max
      max = score
      best = tmp
    else
      tmp = best / step
      score = try_value(phase, tmp, max)
      if score > max
        max = score
        best = tmp
    break if step - 1 < argv.precision
    step **= .5
  console.log "Best value #{best}"
  fs.writeFileSync "L2/#{phase}", "#{best}\n"

do ->
  reload = watch_file('.reload-l2')
  until reload()
    for phase in [0...N_PHASES]
      continue if argv.phase? and phase != argv.phase
      prepare phase
      console.log "Phase #{phase}"
      if phase <= 2
        optimize_cv phase
      else
        optimize_match phase
    break unless argv.loop
