#!/usr/bin/env coffee
require './rejection_handler'
{ pos_array_to_str, pos_to_str, BLACK, pos_array_from_str } = require './board'
{ PatternBoard } = require './pattern'
Book = require './book.coffee'
fs = require 'fs'
Player = require './player'
minmax = require './minmax'
uct = require './uct'
pattern_eval = require('./pattern_eval')('scores.json')
{ round_value } = require './util'

SCOPE = 1
EVAL_DEPTH = 8
WLD = 18
FULL = 16
OPENING = pos_array_from_str('F5')

evaluator = do ->
  eval1 = Player
    book: null
    strategy: minmax
      evaluate: pattern_eval
      verbose: false
      max_depth: EVAL_DEPTH
      cache_size: 100000
    solve_wld: WLD
    solve_full: FULL
    verbose: false
  eval2 = Player
    book: null
    strategy: minmax
      evaluate: pattern_eval
      verbose: false
      max_depth: EVAL_DEPTH-1
      cache_size: 100000
    solve_wld: WLD
    solve_full: FULL
    verbose: false
  (board, me, moves) ->
    move = await eval1(board, me, moves)
    if move.solved
      return move
    move2 = await eval2(board, me, [move.move])
    move.value = (move.value + move2.value) / 2
    move

player = Player
  book: null
  strategy: uct
    evaluate: pattern_eval
    verbose: false
  solve_wld: WLD
  solve_full: FULL
  verbose: false

book = new Book 'book.db'

learn = ->
  {board, moves, turn, value} = await book.find_opening(SCOPE, evaluator, OPENING)
  console.log board.dump true
  console.log pos_array_to_str(moves), round_value(value)
  loop
    unless board.any_moves turn
      turn = -turn
      unless board.any_moves turn
        break
    {move} = await player board, turn
    board.move turn, move
    moves.push {move, turn}
    process.stdout.write pos_to_str move, turn
    turn = -turn
  console.log ':', board.outcome()
  await book.add_game moves
  fs.appendFileSync 'games', "#{pos_array_to_str(moves)} #{board.outcome()}\n"

do ->
  [arg] = process.argv.slice 2
  if arg
    max_games = parseInt arg
  else
    max_games = 0

  await book.init()
  until fs.existsSync('.reload-selfplay')
    await learn()
    if max_games
      n_games = (await book.count_games()) % max_games
      n_games or= max_games
      console.log 'played', n_games
      break if n_games >= max_games
