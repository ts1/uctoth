#!/usr/bin/env coffee
readline = require 'readline'
{
  Board
  BLACK
  WHITE
  EMPTY
  pos_from_str
  square_to_char
  pos_to_str
} = require './board'
{ PatternBoard } = require './pattern'
Player = require './player'
minmax = require './minmax'
pattern_eval = require './pattern_eval'

input = (prompt) -> new Promise (resolve) ->
  rl = readline.createInterface process.stdin, process.stdout
  rl.question prompt, (answer) ->
    resolve answer
    rl.close()

human = (board, turn) ->
  prompt = square_to_char(turn) + '? '
  while true
    pos = await input(prompt)
    if pos.toLowerCase() == 'undo'
      return 'undo'
    try
      pos = pos_from_str(pos)
    catch e
      console.log 'invalid position'
      continue
    if board.can_move(turn, pos)
      break
    else
      console.log 'illegal move'
  {move:pos}

DEPTH = 10
FULL = 19
WLD = 21

simple = Player
  searcher: minmax
    max_depth: DEPTH
    board_class: Board
    shuffle: false
  solve_wld: WLD
  solve_full: FULL

pattern = Player
  searcher: minmax
    evaluate: pattern_eval('scores')
    max_depth: DEPTH
    shuffle: false
    #cache_size: 0
  solve_wld: WLD
  solve_full: FULL

uct = Player
  searcher: require('./uct')
    evaluate: pattern_eval('scores')
  solve_wld: WLD
  solve_full: FULL

#invert = require('./minmax')(
#  evaluate: require('./pattern_eval')('scores')
#  max_depth: DEPTH
#  invert: true
#)
#pattern2 = require('./minmax')(
#  evaluate: require('./pattern_eval')('scores')
#  max_depth: DEPTH
#  shuffle: false
#)

do ->
  board = new PatternBoard
  turn = BLACK
  pass = 0
  undo_stack = []
  while true
    console.log board.dump true
    console.log square_to_char(turn), 'to move'
    console.log square_to_char(BLACK), board.count(BLACK), 'discs', board.list_moves(BLACK).length, 'moves'
    console.log square_to_char(WHITE), board.count(WHITE), 'discs', board.list_moves(WHITE).length, 'moves'
    console.log "#{board.count(EMPTY)} empty squares"
    switch turn
      when BLACK then player = pattern
      when WHITE then player = pattern
    if board.any_moves(turn)
      while true
        {move, value} = await player(board, turn)
        if move == 'undo'
          undo_done = false
          while undo_stack.length
            [t, move, flips]= undo_stack.pop()
            board.undo t, move, flips
            if t == turn
              undo_done = true
              break
          if not undo_done
            console.log 'cannot undo'
            continue
          console.log board.dump true
          continue
        break
      flips = board.move turn, move
      console.assert flips.length
      undo_stack.push [turn, move, flips]
      console.log "#{square_to_char turn} moved to #{pos_to_str move}"
      console.log "estimated value #{value}" if value?
    else
      if board.any_moves(-turn)
        console.log 'PASS'
        if player == human
          await input 'Press Enter'
      else
        break
    turn = -turn
