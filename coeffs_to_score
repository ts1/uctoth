#!/usr/bin/env coffee
require './rejection_handler'
fs = require 'fs'
{ N_PHASES, patterns, get_single_index, get_single_index_size } = require './pattern'
{ int } = require './util'
{ SCORE_MULT } = require './pattern'
argv = require 'yargs'
  .options
    o:
      desc: 'Output file'
      default: 'scores.json'
    h:
      alias: 'help'
  .version false
  .strict()
  .argv

init_scores = ->
  scores = {}
  for p in patterns
    scores[p.name] = []
    for phase in [0...N_PHASES]
      scores[p.name][phase] = []
      for i in [0...(3**p.len+1)/2]
        scores[p.name][phase][i] = 0
  scores

load_coeffs = (scores) ->
  for phase in [0...N_PHASES]
    result = JSON.parse fs.readFileSync "tmp/coeffs#{phase}"
    {coeffs} = result
    for i in [0...get_single_index_size()]
      {pattern, index} = get_single_index(i)
      scores[pattern][phase][index] = coeffs[i]
    scores.meta or= []
    delete result.coeffs
    scores.meta[phase] = result

interpolate = (scores) ->
  for p in patterns
    tbl = scores[p.name]
    for phase in [0...N_PHASES]
      for i in [0...(3**p.len+1)/2]
        if not tbl[phase][i]
          for d in [0...N_PHASES]
            if phase-d >= 0 and tbl[phase-d][i] != 0
              tbl[phase][i] = tbl[phase-d][i]
              #console.log "#{p.name} #{i} #{phase-d}-->#{phase}"
              break
            else if phase+d < N_PHASES and tbl[phase+d][i] != 0
              tbl[phase][i] = tbl[phase+d][i]
              #console.log "#{p.name} #{i} #{phase+d}-->#{phase}"
              break

denormalize = (scores) ->
  for p in patterns
    for phase in [0...N_PHASES]
      tbl = scores[p.name][phase]
      for i in [0...(3**p.len+1)/2]
        r = p.normalize i
        if r != i
          if r >= 0
            tbl[i] = tbl[r]
          else
            tbl[i] = -tbl[-r]

max = 0
round = (scores) ->
  for p in patterns
    for phase in [0...N_PHASES]
      tbl = scores[p.name][phase]
      for i in [0...(3**p.len+1)/2]
        val = Math.round(tbl[i] * SCORE_MULT)
        if Math.abs(val) > max
          max = Math.abs(val)
        val = 32767 if val > 32767
        val = -32768 if val < -32768
        tbl[i] = val

process.stdout.write 'Wrapping up: '
scores = init_scores()
load_coeffs scores
interpolate scores
denormalize scores
round scores
scores.clip = 16
fs.writeFileSync argv.o, JSON.stringify scores
console.log "'#{argv.o}' is ready"
console.log 'max', max
