#!/usr/bin/env coffee

require './rejection_handler'
fs = require 'fs'
{ Board, BLACK, pos_to_str, pos_array_to_str, pos_array_from_str } =
  require './board'
make_player = require './player'
uct = require './uct'
pattern_eval = require('./pattern_eval')('scores.json')
Book = require './book'
argv = require('yargs')
  .usage("Usage: #{process.argv[1]} [games...]")
  .default(opening: 'F5', n: 1000, R: false)
  .boolean('R')
  .argv

RANDOM = .13
BALANCE_MAX = 400

player = make_player
  book: null
  strategy: uct
    evaluate: if argv.R then (-> Math.random()) else pattern_eval
    max_search: if argv.R then 1 else 14000
    verbose: false
    random: RANDOM
  verbose: false
  solve_wld: 18
  solve_full: 16

play = (player) ->
  board = new Board
  turn = BLACK
  moves = []
  for move in pos_array_from_str(argv.opening)
    flips = board.move turn, move
    throw new Error unless flips.length
    moves.push {move, turn}
    process.stdout.write pos_to_str(move, turn)
    turn = -turn
  loop
    unless board.any_moves turn
      turn = -turn
      unless board.any_moves turn
        break
    {move} = await player board, turn
    flips = board.move turn, move
    console.assert flips.length
    moves.push {move, turn}
    process.stdout.write pos_to_str(move, turn)
    turn = -turn
  outcome = board.outcome()
  process.stdout.write " #{outcome}\n"
  {moves, outcome}

do ->
  book = new Book 'book.db'
  await book.init()

  balance = (await book.sum_outcome()) or 0
  console.log "balance #{balance}"
  n_dup = 0
  n_play = 0
  n_skip = 0
  loop
    if fs.existsSync('.reload-selfplay')
      break
    {moves, outcome} = await play player
    moves_str = pos_array_to_str(moves)
    n_play++
    if await book.has_game(moves_str)
      n_dup++
      console.log "DUPLICATED #{n_dup}/#{n_play-n_skip}"
      continue
    b = balance + outcome
    if (b > BALANCE_MAX and outcome > 0) or (b < -BALANCE_MAX and outcome < 0)
      console.log "SKIP FOR BALANCE (current #{balance})"
      n_skip++
      continue
    balance += outcome
    await book.add_game moves
    n_games = (await book.count_games()) % argv.n or argv.n
    console.log 'played', n_games
    break if n_games >= argv.n
  console.log "played #{n_play} duplicated #{n_dup} skipped #{n_skip} balance #{balance}"
