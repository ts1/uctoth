#!/usr/bin/env coffee

fs = require 'fs'
{ Board, BLACK, pos_to_str, pos_array_to_str } = require './board'
{ readlines, int } = require './util'
make_player = require './player'
uct = require './uct'
pattern_eval = require('./pattern_eval')('scores.json')
Book = require './book'

FILENAME = 'games'
RANDOM = .14
WLD = 18
FULL = 16
BALANCE_MAX = 400

player = make_player
  book: null
  strategy: uct
    evaluate: pattern_eval
    verbose: false
    random: RANDOM
  verbose: false
  solve_wld: WLD
  solve_full: FULL

read_games = (filename) ->
  games = {}
  balance = 0
  await readlines filename, (line) ->
    [moves, score] = line.split(' ')
    games[moves] = true
    balance += int(score)
  {games, balance}

play = (player) ->
  board = new Board
  turn = BLACK
  moves = []
  loop
    unless board.any_moves turn
      turn = -turn
      unless board.any_moves turn
        break
    {move} = await player board, turn
    flips = board.move turn, move
    console.assert flips.length
    m = pos_to_str(move, turn)
    moves.push {move, turn}
    process.stdout.write m
    turn = -turn
  outcome = board.outcome()
  process.stdout.write " #{outcome}\n"
  {moves, outcome}

do ->
  args = process.argv.slice 2
  unless args.length
    process.stderr.write "Usage: #{process.argv[1]} number [games...]\n"
    process.exit 1
  max_games = parseInt args[0]

  book = new Book 'book.db'
  book.init()

  total = 0
  for filename in args.slice 1
    console.log 'loading', filename, 'for balance'
    {balance} = await read_games filename
    total += balance

  if fs.existsSync FILENAME
    console.log 'loading', FILENAME
    {games, balance} = await read_games(FILENAME)
  else
    games = {}
    balance = 0
  balance += total
  n_games = Object.keys(games).length
  console.log "balance #{balance}"
  n_dup = 0
  n_play = 0
  n_skip = 0
  while n_games < max_games
    if fs.existsSync('.reload-selfplay')
      break
    {moves, outcome} = await play player
    moves_str = pos_array_to_str(moves)
    n_play++
    if games[moves_str]
      n_dup++
      console.log "DUPLICATED #{n_dup}/#{n_play-n_skip}"
      continue
    b = balance + outcome
    if (b > BALANCE_MAX and outcome > 0) or (b < -BALANCE_MAX and outcome < 0)
      console.log "SKIP FOR BALANCE (current #{balance})"
      n_skip++
      continue
    balance += outcome
    games[moves_str] = true
    await book.add_game moves
    fs.appendFileSync FILENAME, "#{moves_str} #{outcome}\n"
    n_games++
  console.log "played #{n_play} duplicated #{n_dup} skipped #{n_skip} balance #{balance}"
